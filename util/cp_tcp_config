#!/usr/bin/python3

# Copyright (c) 2020 Stanford University
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# This cperf benchmark measures TCP and DCTCP while varying one or more
# aspects of Homa's configuration (such as duty cycle).
# Type "cp_tcp_config --help" for documentation.

from cperf import *

load_info = [["w2", 3.2], ["w3", 14], ["w4", 20], ["w5", 20]]

parser = get_parser(description=
        'Measures Homa slowdown as the number of available priority levels '
        'varies.',
        usage='%(prog)s [options]')
parser.add_argument('-c', '--config', dest='config',
        choices=['cports', 'sports', 'threads'],
        required = True,
        help='Aspect of configuration to change')
parser.add_argument('--tcp', dest='tcp', type=boolean,
        default=True, help="Boolean value: indicates whether measurements "
                "should be run on TCP (default: true)")
parser.add_argument('--dctcp', dest='dctcp', type=boolean,
        default=False, help="Boolean value:: indicates whether measurements "
                "should be run on DCTCP (default: false)")
options = parser.parse_args()
init(options)
servers = range(0, options.num_nodes)
clients = range(0, options.num_nodes)

if options.workload != "":
    load_info = [[options.workload, options.gbps]]

specs = [];
if options.config == 'threads':
    for client, server in [[3, 6], [4, 8], [5, 10], [6, 12], [7, 14]]:
        o = copy.deepcopy(options)
        o.tcp_server_ports = server
        o.tcp_client_ports = client
        name = "s%dc%d" % (server, client)
        specs.append({'options': o, 'exp_name': name, 'label': name})
elif options.config == 'cports':
    for ports in [2, 3, 4, 6, 8]:
        o = copy.deepcopy(options)
        o.tcp_client_ports = ports
        specs.append({'options': o,
                'exp_name': "cports%d" % (ports),
                 'label': "%d client ports" % (ports)})
elif options.config == 'sports':
    for ports in [6, 9, 12, 15, 18]:
        o = copy.deepcopy(options)
        o.tcp_server_ports = ports
        specs.append({'options': o,
                'exp_name': "sports%d" % (ports),
                 'label': "%d server ports" % (ports)})

if not options.plot_only:
    congestion = get_sysctl_parameter("net.ipv4.tcp_congestion_control")
    try:
        # For each workload, run a set of experiments with different
        # configurations.
        for workload, bw in load_info:
            o = copy.deepcopy(options)
            o.protocol = "homa"
            o.workload = workload
            o.client_ports = 1
            o.client_max = 1
            o.server_ports = 1
            o.server_nodes = 1
            o.first_server = 1
            o.unloaded = 500
            start_servers(range(1, 2), o)
            run_experiment("unloaded_" + workload, range(0, 1), o)

            for spec in specs:
                o = options;
                if 'options' in spec:
                    o = spec['options']
                o.protocol = "tcp"
                o.workload = workload
                o.gbps = bw/2.0
                start_servers(servers, o)
                if options.tcp:
                    set_sysctl_parameter("net.ipv4.tcp_congestion_control",
                            "cubic", range(0, options.num_nodes))
                    run_experiment("tcp_%s_%s" % (spec['exp_name'], workload),
                            clients, o)
                if options.dctcp:
                    set_sysctl_parameter("net.ipv4.tcp_congestion_control",
                            "dctcp", range(0, options.num_nodes))
                    run_experiment("dctcp_%s_%s" % (spec['exp_name'], workload),
                            clients, o)
    except Exception as e:
        log(traceback.format_exc())

    print("Resetting TCP congestion control to %s" % (congestion))
    set_sysctl_parameter("net.ipv4.tcp_congestion_control", congestion,
            range(0, options.num_nodes))

    log("Stopping nodes")
    stop_nodes()
    scan_logs()

# Generate plots and reports
for workload, bw in load_info:
    set_unloaded("unloaded_" + workload)

    log("Generating slowdown plots for %s" % (workload))
    if options.tcp:
        title = "%s %d nodes, %.1f Gbps" % (workload.capitalize(),
                options.num_nodes, bw)
        ax = start_slowdown_plot(title, 1000,
                "tcp_%s_%s" % (specs[0]['exp_name'], workload),
                y_label="TCP Slowdown")
        for spec in specs:
            exp_name = "tcp_%s_%s" % (spec['exp_name'], workload)
            plot_slowdown(ax, exp_name, "p99", spec['label']+' P99')
        for spec in specs:
            exp_name = "tcp_%s_%s" % (spec['exp_name'], workload)
            plot_slowdown(ax, exp_name, "p50", spec['label']+' P50')
        ax.legend(loc="upper right", prop={'size': 9})
        plt.tight_layout()
        plt.savefig("%s/reports/tcp_%s_%s.pdf" %
                (options.log_dir, options.config, workload))

    if options.dctcp:
        title = "%s %d nodes, %.1f Gbps" % (workload.capitalize(),
                options.num_nodes, bw)
        ax = start_slowdown_plot(title, 10000,
                "dctcp_%s_%s" % (specs[0]['exp_name'], workload),
                y_label="DCTCP Slowdown")
        for spec in specs:
            exp_name = "dctcp_%s_%s" % (spec['exp_name'], workload)
            plot_slowdown(ax, exp_name, "p99", spec['label']+' P99')
        for spec in specs:
            exp_name = "dctcp_%s_%s" % (spec['exp_name'], workload)
            plot_slowdown(ax, exp_name, "p50", spec['label']+' P50')
        ax.legend(loc="upper right", prop={'size': 9})
        plt.tight_layout()
        plt.savefig("%s/reports/dctcp_%s_%s.pdf" %
                (options.log_dir, options.config, workload))

    log("Generating short message CDFs for %s" % (workload))
    if options.tcp:
        title = "%s %d nodes" % (workload.capitalize(), options.num_nodes)
        start_cdf_plot(title, 10, 0.99e05, 1e-05, "TCP RTT (usecs)",
                "Cumulative Fraction of Short Messages")
        for spec in specs:
            exp_name = "tcp_%s_%s" % (spec['exp_name'], workload)
            x, y = get_short_cdf(exp_name)
            plt.plot(x, y, label=spec['label'])

        plt.legend(loc="upper right", prop={'size': 9})
        plt.savefig("%s/reports/tcp_%s_%s_cdfs.pdf" %
                (options.log_dir, options.config, workload))

    if options.dctcp:
        title = "%s %d nodes" % (workload.capitalize(), options.num_nodes)
        start_cdf_plot(title, 10, 0.99e05, 1e-05, "DCTCP RTT (usecs)",
                "Cumulative Fraction of Short Messages")
        for spec in specs:
            exp_name = "dctcp_%s_%s" % (spec['exp_name'], workload)
            x, y = get_short_cdf(exp_name)
            plt.plot(x, y, label=spec['label'])

        plt.legend(loc="upper right", prop={'size': 9})
        plt.savefig("%s/reports/dctcp_%s_%s_cdfs.pdf" %
                (options.log_dir, options.config, workload))
