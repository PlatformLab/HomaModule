#!/usr/bin/python3

# Copyright (c) 2020 Stanford University
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# This cperf benchmark measures the performance of TCP by itself, with
# no message truncation.
# Type "cp_tcp --help" for documentation.

from cperf import *

parser = get_parser(description=
        'Measures slowdown as a function of message size for TCP or DCTCP.',
        usage='%(prog)s [options]')
parser.add_argument('--dctcp', dest='dctcp', type=boolean,
        default=False, help="Boolean value:: indicates whether measurements "
                "should be run on DCTCP (default: false)")
options = parser.parse_args()
# options.no_trunc = True
init(options)
servers = range(0, options.num_nodes)
clients = range(0, options.num_nodes)

if options.workload != "":
    load_info = [[options.workload, options.gbps]];

if options.dctcp:
    prot = "dctcp"
    label = "DCTCP"
    color = dctcp_color
else:
    prot = "tcp"
    label = "DCTCP"
    color = tcp_color

# First, run all of the experiments
if not options.plot_only:
    congestion = get_sysctl_parameter("net.ipv4.tcp_congestion_control")
    if options.dctcp:
        set_sysctl_parameter("net.ipv4.tcp_congestion_control",
                        "dctcp", range(0, options.num_nodes))
    else:
        set_sysctl_parameter("net.ipv4.tcp_congestion_control",
                    "cubic", range(0, options.num_nodes))
    for workload, bw in load_info:
        options.workload = workload
        options.gbps = bw/2.0
        unloaded_exp = "unloaded_" + workload;
        exp = "%s_%s" % (prot, workload);
        try:
            options.protocol = "tcp"
            start_servers(servers, options)

            o = copy.deepcopy(options);
            o.tcp_client_ports = 1
            o.client_max = 1
            o.tcp_server_ports = 1
            o.server_nodes = 1
            o.first_server = 1
            o.unloaded = 500
            run_experiment(unloaded_exp, range(0, 1), o)
            run_experiment(exp, clients, options)
            do_cmd("tt print cp.tt", clients)
        except Exception as e:
            log(traceback.format_exc())

    set_sysctl_parameter("net.ipv4.tcp_congestion_control", congestion,
            range(0, options.num_nodes))
    log("Stopping nodes")
    stop_nodes()
    scan_logs()

# Generate plots and reports
for workload, bw in load_info:
    unloaded_exp = "unloaded_" + workload;
    exp = "%s_%s" % (prot, workload);

    set_unloaded(unloaded_exp)

    # Generate slowdown plot.
    log("Generating slowdown plot for %s" % (workload))
    title = "%s %d nodes, %.1f Gbps" % (workload.capitalize(),
            options.num_nodes, bw)
    ax = start_slowdown_plot(title, 1000, exp)
    plot_slowdown(ax, exp, "p99", "%s P99" % (prot))
    plot_slowdown(ax, exp, "p50", "%s P50" % (prot))
    ax.legend()
    plt.tight_layout()
    plt.savefig("%s/reports/%s_%s.pdf" % (options.log_dir, prot, workload))

    # Generate CDF of small-message RTTs.
    log("Generating short message CDF for %s" % (workload))
    x, y = get_short_cdf(exp)
    start_cdf_plot(title, 10, 0.99e05, 1e-05, "RTT (usecs)",
            "Cumulative Fraction Short Messages")
    plt.plot(x, y, label=label, color=color)
    plt.legend(loc="upper right", prop={'size': 9})
    plt.savefig("%s/reports/short_cdf_%s.pdf" % (options.log_dir, workload))
