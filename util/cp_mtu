#!/usr/bin/python3

# Copyright (c) 2020 Stanford University
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# This cperf benchmark generates CDFs of short-message latency for Homa
# and TCP under different values for MTU (maximum packet size).
# Type "cp_vs_mtu --help" for documentation.

from cperf import *

parser = get_parser(description=
        'Generates small-message latency CDFs as a function of MTU for '
        'Homa and TCP.',
        usage='%(prog)s [options]'})
parser.add_argument('-w', '--workload', dest='workload',
        metavar='W', required = True,
        help='Workload to use for benchmark: w1-w5 or number')
options = parser.parse_args()
init(options)
options.gbps = options.gbps/2.0
servers = range(0, options.num_nodes)
clients = range(0, options.num_nodes)
mtus = [1500, 3000, 6000, 9000]

# Run the experiments
if not options.plot_only:
    try:
        do_ssh(["sudo", "ip", "link", "set", "ens1f1", "mtu", "1500"],
                range(0, options.num_nodes))
        do_ssh(["sudo", "ip", "link", "set", "vlan287", "mtu", "1500"],
                range(0, options.num_nodes))
        options.protocol = "homa"
        start_servers(servers, options)

        o = copy.deepcopy(options)
        o.gbps = 0.0
        o.client_ports = 1
        o.client_max = 1
        o.server_ports = 1
        o.server_nodes = 1
        o.first_server = 1
        o.unloaded = 500
        run_experiment("unloaded_%s" % (options.workload), range(0, 1), o)

        for mtu in mtus:
            do_ssh(["sudo", "ip", "link", "set", "ens1f1", "mtu", str(mtu)],
                    range(0, options.num_nodes))
            do_ssh(["sudo", "ip", "link", "set", "vlan287", "mtu", str(mtu)],
                    range(0, options.num_nodes))
            start_servers(servers, options)
            run_experiment("homa_%s_mtu%d" % (options.workload, mtu),
                    clients, options)

        options.protocol = "tcp"
        for mtu in mtus:
            do_ssh(["sudo", "ip", "link", "set", "ens1f1", "mtu", str(mtu)],
                    range(0, options.num_nodes))
            do_ssh(["sudo", "ip", "link", "set", "vlan287", "mtu", str(mtu)],
                    range(0, options.num_nodes))
            start_servers(servers, options)
            run_experiment("tcp_%s_mtu%d" % (options.workload, mtu),
                    clients, options)

        do_ssh(["sudo", "ip", "link", "set", "ens1f1", "mtu", "1500"],
                range(0, options.num_nodes))
        do_ssh(["sudo", "ip", "link", "set", "vlan287", "mtu", "1500"],
                range(0, options.num_nodes))
    except Exception as e:
        log(traceback.format_exc())

    log("Stopping nodes")
    stop_nodes()
    scan_logs()

# Generate plots and reports
unloaded_exp = "unloaded_%s" % (options.workload)
set_unloaded(unloaded_exp)

# Generate CDF of small-message RTTs.
log("Generating short message CDFs")
title = "%s %d nodes" % (options.workload.capitalize(), options.num_nodes)
start_cdf_plot(title, 10, 0.99e05, 1e-05, "RTT (usecs)",
        "Cumulative Fraction of Short Messages")

set_unloaded("unloaded_%s" % (options.workload))
styles = [(0, (1, 1)), (0, (2, 2)), (0, (5, 2)), "solid"]
for mtu in mtus:
    x, y = get_short_cdf("tcp_%s_mtu%d" % (options.workload, mtu))
    plt.plot(x, y, label="TCP MTU %d" % (mtu),
            color=tcp_color, linestyle=styles.pop())
styles = [(0, (1, 1)), (0, (2, 2)), (0, (5, 2)), "solid"]
for mtu in mtus:
    x, y = get_short_cdf("homa_%s_mtu%d" % (options.workload, mtu))
    plt.plot(x, y, label="Homa MTU %d" % (mtu),
            color=homa_color, linestyle=styles.pop())
x, y = get_short_cdf(unloaded_exp)
plt.plot(x, y, label="Homa best case", color=unloaded_color)

plt.legend(loc="upper right", prop={'size': 9})
plt.savefig("%s/reports/mtu_cdfs_%s.pdf" % (options.log_dir, options.workload))

# print(plt.rcParams['axes.prop_cycle'].by_key()['color'])